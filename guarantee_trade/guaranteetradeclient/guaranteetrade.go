// Code generated by goctl. DO NOT EDIT!
// Source: guarantee_trade.proto

//go:generate mockgen -destination ./guaranteetrade_mock.go -package guaranteetradeclient -source $GOFILE

package guaranteetradeclient

import (
	"context"

	"github.com/bjhuang103/go_pay/guarantee_trade/guarantee_trade"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	PrePayReq  = guarantee_trade.PrePayReq
	PrePayResp = guarantee_trade.PrePayResp
	PayReq     = guarantee_trade.PayReq
	PayResp    = guarantee_trade.PayResp

	GuaranteeTrade interface {
		PrePay(ctx context.Context, in *PrePayReq) (*PrePayResp, error)
		Pay(ctx context.Context, in *PayReq) (*PayResp, error)
	}

	defaultGuaranteeTrade struct {
		cli zrpc.Client
	}
)

func NewGuaranteeTrade(cli zrpc.Client) GuaranteeTrade {
	return &defaultGuaranteeTrade{
		cli: cli,
	}
}

func (m *defaultGuaranteeTrade) PrePay(ctx context.Context, in *PrePayReq) (*PrePayResp, error) {
	client := guarantee_trade.NewGuaranteeTradeClient(m.cli.Conn())
	return client.PrePay(ctx, in)
}

func (m *defaultGuaranteeTrade) Pay(ctx context.Context, in *PayReq) (*PayResp, error) {
	client := guarantee_trade.NewGuaranteeTradeClient(m.cli.Conn())
	return client.Pay(ctx, in)
}
